import os

BOT_TOKEN = os.getenv("BOT_TOKEN")

import json
import os
import random
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# === Контент ===
metaphors = [
    "Яблоня. Она не спешит — но точно знает, когда время цвести.",
    "Пустой берег. Именно там приходит настоящее решение.",
    "Тонкий мост. Идти страшно, но за ним свобода.",
    "Дымка. Ты не обязана всё видеть чётко, чтобы двигаться.",
    "Ветер. Он не имеет формы, но двигает даже скалы."
    "Река всегда находит путь, даже сквозь камни.",
    "Глина в руках превращается в произведение искусства.",
    "Маяк светит, не спрашивая, видит ли его кто-то.",
    "Дерево зимой знает: под снегом — жизнь.",
    "Парус ловит даже слабый ветер.",
    "Компас знает направление, даже когда карты нет.",
    "Книга становится интереснее с каждой новой страницей.",
    "Мост соединяет берега, не боясь глубины.",
    "Зерно содержит в себе целый лес.",
    "Луна не торопится — у неё свои фазы.",
    "Корабль плывёт, несмотря на волны.",
    "Птица отдыхает, не прекращая полёта.",
    "Огонь греет, даже если вокруг холод.",
    "Дорога ценна каждым поворотом.",
    "Мост между мечтой и реальностью крепче, чем кажется.",
    "Звезда светит, даже если на неё не смотрят.",
    "Сад растёт там, где есть забота.",
    "Эхо возвращает только то, что было послано.",
    "Пазл обретает смысл в общей картине.",
    "Танец прекрасен, даже если шаги не идеальны.",
    "Гора меняет ландшафт, оставаясь неподвижной.",
    "Радуга появляется именно тогда, когда её ждут.",
    "Ключ открывает дверь, но не ломает её.",
    "Свеча освещает тьму, не требуя внимания.",
    "Море может быть и бурным, и спокойным — это его природа.",
    "Ветер бывает и ласковым, и сильным — он не обязан выбирать.",
    "Мост между возможностями строится шаг за шагом.",
    "Рассвет не спрашивает разрешения, чтобы наступить.",
    "Корни держат дерево, даже если их не видно.",
    "Холст становится шедевром в терпеливых руках.",
    "Маяк светит себе сам, и этого достаточно.",
    "Река обтекает камни, а не борется с ними.",
    "Зеркало отражает только то, что перед ним.",
    "Песок принимает любую форму, но остаётся собой.",
    "Крылья не видны, но их сила — в движении.",
    "Океан хранит спокойствие даже в глубине.",
    "Мост между прошлым и будущим — это настоящее.",
    "Лес полон жизни, даже когда кажется тихим.",
    "Костер собирает вокруг себя тепло и истории.",
    "Партия игры интересна, даже если правила меняются.",
    "Дождь питает то, что готово расти.",
    "Облако свободно менять форму, не теряя сути.",
    "Нить соединяет события в узор, который виден лишь со стороны.",
    "Бриз освежает, даже если его не замечают.",
    "Камень в ручье становится гладким, но не перестаёт быть камнем.",
    "Дорожная карта помогает, даже если путь неизвестен.",
    "Фонарь освещает шаги, а не весь путь.",
    "Песня становится красивее, когда в неё верят.",
    "Корни дают силу, даже если их не хвалят.",
    "Книга пишется день за днём — спешить некуда.",
    "Волна всегда возвращается к берегу — это её природа.",
    "Алмаз создаётся под давлением, но не ломается.",
    "Тропа становится тропой, когда по ней идут.",
    "Солнце светит, не ожидая благодарности.",
    "Паутина ловит только то, что само попадает в неё.",
    "Ракушка хранит в себе шум океана, даже на суше.",
    "Мост между мечтами и действиями строится из решений.",
    "Гром напоминает о силе, которая всегда была внутри.",
    "Песочные часы напоминают: время течёт, но суть остаётся.",
    "Сад расцветает там, где ему позволяют.",
    "Луч света рассеивает туман, даже если он один.",
    "Водопад движется вперёд, потому что такова его природа.",
    "Якорь держит корабль, даже если море бушует.",
    "Эхо возвращает только то, что было сказано.",
    "Корабль плывёт против течения, если знает, куда.",
    "Осень учит отпускать с благодарностью.",
    "Мост между страхом и свободой — это шаг.",
    "Роса освежает даже то, что кажется маленьким.",
    "Корни держат, даже если их не замечают.",
    "Танец — это не только ритм, но и свобода.",
    "Облако несёт дождь, даже если его не просят.",
    "Комета оставляет след, но не привязывается к нему.",
    "Зерно знает: урожай — вопрос времени.",
    "Ветер меняет направление, но не свою суть.",
    "Мост между идеей и воплощением — это действие.",
    "Лучик находит путь даже в самой густой тьме.",
    "Пауза в музыке придаёт смысл нотам.",
    "Горная тропа ведёт к вершине, но можно идти медленно.",
    "Костер греет тех, кто готов подойти ближе.",
    "Река течёт, но берег остаётся.",
    "Радуга появляется, когда дождь и солнце встречаются.",
    "Скульптор видит в камне то, что скрыто от других.",
    "Мост между словами и делами — это честность.",
    "Магнит притягивает то, что ему резонирует.",
    "Парус ловит ветер, но направление выбирает капитан.",
    "Утро приносит новые возможности, даже если вчера было трудно.",
    "Корень уверенности растёт незаметно, но крепко.",
    "Море глубоко, даже когда кажется спокойным.",
    "Фонарь горит, не спрашивая, нужен ли его свет.",
    "Партитура становится музыкой в умелых руках.",
    "Росток пробивает асфальт, потому что ему важно жить.",
    "Водоворот находит силу в движении, а не в покое.",
    "Мост между вчера и завтра — это сегодня.",
    "Снежинка уникальна, даже если их миллионы.",
    "Эхо разносит только то, что было сказано вслух.",
    "Рассвет знает: ночь не вечна.",
    "Корни дают устойчивость, даже если их не хвалят.",
    "Маяк светит, даже если корабль ещё далеко.",
    "Паутина соединяет случайности в узор, который имеет смысл.",
    "Полёт — это не только движение, но и свобода."
    
]

suggestions = [
    "Истинное движение начинается в тот момент, когда ты больше не боишься остановиться.",
    "Твоя суть проявляется не в стремлении быть светом, а в умении жить в своей тени.",
    "Покой — это не отсутствие шума, а способность слышать себя сквозь какофонию внешнего.",
    "Порой, чтобы выйти на поверхность, нужно перестать бояться дна.",
    "Смысл не найден, он рождается, когда ты готов не знать.",
    "Ты не обязан знать, куда идёшь. Достаточно того, что ты в пути.",
    "Даже сомнение — форма движения. Позволь ему быть, но не командовать.",
    "В моменты внутренней тишины рождаются самые важные ответы.",
    "Опора не всегда тверда. Иногда она — это просто твоё дыхание.",
    "Быть собой — это не цель. Это способ идти по жизни.",
    "Ты не должен сиять всегда. Даже солнце отдыхает ночью.",
    "Ты не сломался. Ты трансформируешься.",
    "Неизвестность — это приглашение к открытию, а не к страху.",
    "Смысл — не то, что найдёшь. Это то, что создаёшь.",
    "Когда ты в тупике — возможно, ты просто стоишь перед новым входом.",
    "Слышать себя — уже форма заботы.",
    "Ты не обязан быть сильным. Ты можешь быть настоящим.",
    "Тишина — не пустота. В ней живёт отклик.",
    "Отказ — тоже выбор. Особенно если он ведёт к себе.",
    "Ты больше, чем твои страхи. Они не определяют твои границы.",
    "Глубина не пугает тех, кто научился дышать внутри.",
    "Встретиться с собой — самый важный разговор в жизни.",
    "Доверие — не слабость, а форма силы.",
    "Путь к себе — не всегда прямой. Но он всегда настоящий.",
    "Даже если сегодня ты просто дышишь — ты уже живёшь.",
    "Ты имеешь право на паузу. В ней — твой ритм.",
    "Медленность — не ошибка. Это способ быть внимательным.",
    "Иногда правильный шаг — не вперёд, а внутрь.",
    "Позволить себе чувствовать — значит позволить себе быть.",
    "Не нужно быть героем. Достаточно быть искренним.",
    "Ощущение потерянности — часть процесса обретения.",
    "Ты не обязан быть понятным. Ты имеешь право быть собой.",
    "Даже в шторме можно найти центр покоя.",
    "Ты — не то, что с тобой случилось. Ты — то, как ты к этому отнёсся.",
    "Порой забота о себе — это просто чашка чая и тишина.",
    "В каждом дне есть точка, в которой ты можешь выбрать себя.",
    "Ты уже идёшь. Даже если стоишь — ты осматриваешься.",
    "Границы — это не стены. Это мосты к честности.",
    "Когда отпускаешь — освобождаешь и себя, и других.",
    "Покой не приходит — его создают внутри.",
    "Ты не должен быть всегда продуктивным, чтобы быть ценным.",
    "Иногда лучшее, что ты можешь сделать — это остаться с собой.",
    "В уязвимости рождается настоящее.",
    "Ты не обязан торопиться. Достаточно просто быть.",
    "Даже если ты упал — это точка опоры для следующего шага.",
    "Твоя ценность не в том, что ты делаешь, а в том, кто ты есть.",
    "Принятие — не капитуляция. Это шаг к свободе.",
    "Пока ты дышишь — ты можешь начать сначала.",
    "Ты не обязан знать всё. Достаточно быть открытым.",
    "Твоя дорога — не сравнима. Она уникальна."
]

numbers = [
    "1 — время проявиться. Сделай шаг вперёд.",
    "2 — найди поддержку. В диалоге и в себе.",
    "3 — вырази себя. Танец, слово, звук — твоя энергия хочет наружу."
]

practices = [
    "Закрой глаза и положи ладонь на грудь. Подыши. Почувствуй: 'Я у себя есть'.",
    "Выпиши 3 вещи, которые дали тебе радость вчера. Пусть это будет опорой на сегодня.",
    "Представь, что ты идёшь по лесу. Где бы ты остановилась? Что бы ты сказала себе?"
]

# === История пользователей ===
HISTORY_FILE = "user_history.json"
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as f:
            return json.load(f)
    return {}

def save_history(data):
    with open(HISTORY_FILE, "w") as f:
        json.dump(data, f)
        
def get_unique_metaphor(user_id, last_text=None):
    history = load_history()
    key = f"metaphor:{user_id}"
    used = history.get(key, [])
    available = [s for s in metaphors if s not in used and s != last_text]
    if not available:
        history[key] = []
        save_history(history)
        available = [s for s in metaphors if s != last_text]
    chosen = random.choice(available)
    used.append(chosen)
    history[key] = used
    save_history(history)
    return chosen
        

def get_unique_suggestion(user_id, last_text=None):
    history = load_history()
    used = history.get(str(user_id), [])
    available = [s for s in suggestions if s not in used and s != last_text]
    if not available:
        history[str(user_id)] = []
        save_history(history)
        available = [s for s in suggestions if s != last_text]
    chosen = random.choice(available)
    used.append(chosen)
    history[str(user_id)] = used
    save_history(history)
    return chosen

# === Клавиатура главного меню ===
def get_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("🎴 Вытянуть метафору", callback_data='metaphor')],
        [InlineKeyboardButton("✨ Подсказка дня", callback_data='suggestion')],
        [InlineKeyboardButton("🔢 Цифра дня", callback_data='number')],
        [InlineKeyboardButton("🌿 Микро-практика опоры", callback_data='practice')]
    ])

# === Обработчики ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = get_main_menu()
    await update.message.reply_text(
        "Привет. Это твой личный ритуал ясности. Выбери, что тебе откликается в данный момент:",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    current_text = query.message.text

    if query.data == 'metaphor':
        text = get_unique_metaphor(user_id, current_text)

    elif query.data == 'suggestion':
            text = get_unique_suggestion(user_id, current_text)
    elif query.data == 'number':
            text = random.choice(numbers)
    elif query.data == 'practice':
            text = random.choice(practices)
    elif query.data.startswith('again:'):
        return await button_again(update, context, query.data.split(':')[1])
    elif query.data == 'back_to_menu':
        return await query.edit_message_text(
            "Привет. Это твой личный ритуал ясности. Выбери, что тебе откликается в данный момент:",
            reply_markup=get_main_menu()
        )
    else:
        text = "Что-то пошло не так. Попробуй снова."

    keyboard = [
        [InlineKeyboardButton("🔁 Хочу ещё", callback_data=f"again:{query.data}")],
        [InlineKeyboardButton("🔙 В меню", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    except telegram.error.BadRequest as e:
        if str(e) != "Message is not modified":
            raise

async def button_again(update: Update, context: ContextTypes.DEFAULT_TYPE, type_choice: str):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    current_text = query.message.text

    if type_choice == 'metaphor':
        text = get_unique_metaphor(user_id, current_text)

    elif type_choice == 'suggestion':
            text = get_unique_suggestion(user_id, current_text)
    elif type_choice == 'number':
            text = random.choice(numbers)
    elif type_choice == 'practice':
            text = random.choice(practices)
    else:
        text = "Что-то пошло не так. Попробуй снова."

    keyboard = [
        [InlineKeyboardButton("🔁 Хочу ещё", callback_data=f"again:{type_choice}")],
        [InlineKeyboardButton("🔙 В меню", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    except telegram.error.BadRequest as e:
        if str(e) != "Message is not modified":
            raise

# === Запуск ===
app = ApplicationBuilder().token("8090107787:AAH-20Pn8BiceEFzc77zLi7h1yv3pNK9RFM").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button))

app.run_polling()
